#include <iostream> 
using namespace std; 
  
class Node  
{  
    public: 
    int data;  
    Node *next;  
};  
  

void push(Node** head_ref, int new_data)  
{  
    Node* new_node = new Node(); 
  
    new_node->data = new_data;  
  
    new_node->next = (*head_ref);  
  
    (*head_ref) = new_node;  
}  
  
void insertAfter(Node* prev_node, int new_data)  
{  
    if (prev_node == NULL)  
    {  
        cout<<"the given previous node cannot be NULL";  
        return;  
    }  
  
    Node* new_node = new Node(); 
  
    new_node->data = new_data;  
  
    new_node->next = prev_node->next;  
  
    prev_node->next = new_node;  
}  
  
void append(Node** head_ref, int new_data)  
{  
    Node* new_node = new Node(); 
  
    Node *last = *head_ref; 
  
    new_node->data = new_data;  
  
   
    new_node->next = NULL;  
  
   
    if (*head_ref == NULL)  
    {  
        *head_ref = new_node;  
        return;  
    }  
  
    while (last->next != NULL)  
        last = last->next;  
  
    last->next = new_node;  
    return;  
}  
 
void printList(Node *node)  
{  
    while (node != NULL)  
    {  
        cout<<" "<<node->data;  
        node = node->next;  
    }  
}  


void deleteNode(Node **head_ref, int key) 
{ 
    Node* temp = *head_ref, *prev; 
  
    if (temp != NULL && temp->data == key) 
    { 
        *head_ref = temp->next;   
        free(temp);               
        return; 
    } 
  
    
    while (temp != NULL && temp->data != key) 
    { 
        prev = temp; 
        temp = temp->next; 
    } 
  
   
    if (temp == NULL) return; 
  
   
    prev->next = temp->next; 
  
    free(temp);  
} 


void deleteList(Node** head_ref)  
{  
      
 Node* current = *head_ref;  
 Node* next;  
  
while (current != NULL)  
{  
    next = current->next;  
    free(current);  
    current = next;  
}  
      
 
 *head_ref = NULL;  
}  
  
int main()  
{  
    Node* head = NULL;  
      
    append(&head, 6);  
      
    push(&head, 7);  
      
    push(&head, 1);  
      
    append(&head, 4);  
      
    insertAfter(head->next, 8);  
      
    cout<<"Created Linked list is: ";  
    printList(head);  
    
    deleteNode(&head,4);
    deleteList(&head);
      
    return 0;  
}  
